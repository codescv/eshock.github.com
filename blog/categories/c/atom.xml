<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | Hacking is great fun.]]></title>
  <link href="http://eshock.github.io/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://eshock.github.io/"/>
  <updated>2013-08-04T17:01:44+08:00</updated>
  <id>http://eshock.github.io/</id>
  <author>
    <name><![CDATA[Chi Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[二级指针在链表操作中的应用]]></title>
    <link href="http://eshock.github.io/blog/2013/07/20/linus-linked-list/"/>
    <updated>2013-07-20T19:44:00+08:00</updated>
    <id>http://eshock.github.io/blog/2013/07/20/linus-linked-list</id>
    <content type="html"><![CDATA[<p>故事起源于Linus大神在回答水友提问的时候有这么一段: <a href="http://meta.slashdot.org/story/12/10/11/0030249/linus-torvalds-answers-your-questions">http://meta.slashdot.org/story/12/10/11/0030249/linus-torvalds-answers-your-questions</a></p>

<p>At the opposite end of the spectrum, I actually wish more people understood the really core low-level kind of coding. Not big, complex stuff like the lockless name lookup, but simply good use of pointers-to-pointers etc. For example, I&rsquo;ve seen too many people who delete a singly-linked list entry by keeping track of the &ldquo;prev&rdquo; entry, and then to delete the entry, doing something like</p>

<p>{% codeblock lang:c %}
if (prev)</p>

<pre><code>prev-&gt;next = entry-&gt;next;
</code></pre>

<p>else</p>

<pre><code>list_head = entry-&gt;next;
</code></pre>

<p>{% endcodeblock %}</p>

<p>and whenever I see code like that, I just go &ldquo;This person doesn&rsquo;t understand pointers&rdquo;. And it&rsquo;s sadly quite common.</p>

<p>People who understand pointers just use a &ldquo;pointer to the entry pointer&rdquo;, and initialize that with the address of the list_head. And then as they traverse the list, they can remove the entry without using any conditionals, by just doing a &ldquo;*pp = entry->next&rdquo;.</p>

<p>大意是说，当从一个单向链表中删除一个元素时，很多人会使用一个prev指针来记录被删除的那个节点的前一个元素的位置，然后使用<code>prev-&gt;next = entry-&gt;next</code>的方式去删除。这样的人简直弱爆了，根本就不懂得指针。</p>

<p>可能这样说还不是很清楚，让我们来看个比较完整的例子吧：</p>

<p>{% codeblock lang:c %}
Node<em> find_and_delete(Node </em>head, int target)
{</p>

<pre><code>Node *prev = NULL;
Node *entry = head;
while (entry != NULL) {
    if (entry-&gt;val == target) {
        if (prev) {
            prev-&gt;next = entry-&gt;next;
        } else {
            head = entry-&gt;next;
        }   
        break;
    }   
    prev = entry;
    entry = entry-&gt;next;
}   
return head;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>函数<code>find_and_delete</code>完成了这么一个功能：遍历一个单向链表，如果找到和给出的target相等的值，就从链表中删除这个节点。上述方法是一般c语言教科书（例如谭浩强之类）里的标准做法。但是这种方法遭到了Linus大神的强烈鄙视和唾弃，认为这是不懂指针的人的做法。Linus提到了一个使用二级指针的方法<code>*pp = entry-&gt;next</code>可以让我们不需要判断就可以删除，这是怎么做到的呢？</p>

<p>{% codeblock lang:c %}
void find_and_delete2(Node **head, int target)
{</p>

<pre><code>while (*head != NULL) {
    Node *entry = *head;
    if (entry-&gt;val == target) {
        *head = entry-&gt;next;
        break;
    }   
    head = &amp;(entry-&gt;next);
}   
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>在<code>find_and_delete2</code>函数中，巧妙的使用了一个二级指针，从而直接修改了当前entry指针的指向，代码精简了很多。不过这个代码并非很容易正确实现（大家可以自己试试，能不能一遍写正确）。(特别的，想想<code>head = &amp;(entry-&gt;next)，</code>和<code>*head = entry-&gt;next</code>有什么区别？ )</p>

<p>不得不说玩kernel的大神对指针的理解确实比我辈强的多，学一招还挺有用的。学了这招以后去leetcode上切了一题，也用了二级指针:&ndash;)</p>

<p><a href="https://github.com/eshock/leetcode/blob/master/AddTwoNumbersNoNew.cpp">https://github.com/eshock/leetcode/blob/master/AddTwoNumbersNoNew.cpp</a></p>

<p>最后，上个完整的测试代码例子，供懒得敲代码的人玩耍：</p>

<p>{% include_code linked_list_delete.c %}</p>
]]></content>
  </entry>
  
</feed>
